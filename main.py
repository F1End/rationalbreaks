from rationalbreaks import timers
from time import sleep
from datetime import datetime, timedelta

if __name__ == "__main__":
    # a = datetime.now()
    # sleep(2)
    # b = datetime.now()
    # c = a - b
    # d = b - a
    # e = - (b - a)
    # print(c)
    # print(d)
    # print(e)
    # print("*****")
    timer = timers.RatioNalTimer()
    timer.start()
    # worked, rest = timer.timers()
    # print(f"Worked: {worked},Rest: {rest}")
    # sleep(5)
    # print(f"Worked: {worked},Rest: {rest}")
    # timer.rest()
    # sleep(1)
    # print(f"Worked: {worked},Rest: {rest}")
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    s = 3
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    s = 10
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    timer.rest()
    s = 3
    print(f"sleeping for {s}")
    print(timer._current_rest)
    print(timer._carried_rest)
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    print(timer._current_rest)
    print(timer._carried_rest)
    s = 3
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    timer.continue_work()
    s = 3
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    s = 3
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    timer.rest()
    s = 3
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    s = 3
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    s = 3
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    timer.continue_work()
    s = 3
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    s = 5
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    # print("*" * 8)
    # print(timer._total_worked)
    # print(timer._consumed_rest)
    # print(timer._available_rest)
    # print(timer._overrest)
    # print("*" * 8)
    timer.rest()
    s = 2
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    # print("*" * 8)
    # print(timer._total_worked)
    # print(timer._consumed_rest)
    # print(timer._available_rest)
    # print(timer._overrest)
    # print("*" * 8)
    s = 2
    print(f"sleeping for {s}")
    sleep(s)
    print(timer.status())
    print(f"Worked time: {timer.work_time()}")
    print(f"Resting time: {timer.rest_time()}")
    # print("*" * 8)
    # print(timer._consumed_rest)
    # print(timer._available_rest)
    # print(timer._overrest)
    # print("*" * 8)